/**
 * @fileoverview Ponto de entrada principal do WhatsApp Bot
 * @description Bot migrado do whatsapp-web.js para WppConnect + TypeScript
 */

import { WhatsAppAPI } from './api';

// ===========================
// CONSTANTES
// ===========================

const DEFAULT_PORT = 3000;
const APP_NAME = 'WhatsApp Bot - WppConnect + TypeScript';

// ===========================
// TRATAMENTO DE ERROS GLOBAIS
// ===========================

/**
 * Configura handlers globais para erros n√£o capturados
 */
function setupGlobalErrorHandlers(): void {
  process.on('uncaughtException', (err) => {
    console.error('‚ùå Erro n√£o capturado:', err);
    console.error('üìä Stack trace:', err.stack);
    process.exit(1);
  });

  process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promise rejeitada:', reason);
    console.error('üìç Promise:', promise);
    process.exit(1);
  });

  process.on('SIGINT', () => {
    console.log('\nüõë Recebido SIGINT. Encerrando aplica√ß√£o...');
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\nüõë Recebido SIGTERM. Encerrando aplica√ß√£o...');
    process.exit(0);
  });
}

// ===========================
// FUN√á√ïES AUXILIARES
// ===========================

/**
 * Obt√©m a porta do ambiente ou usa a padr√£o
 */
function getPort(): number {
  const envPort = process.env.PORT;
  if (envPort) {
    const port = parseInt(envPort, 10);
    if (isNaN(port) || port <= 0 || port > 65535) {
      console.warn(
        `‚ö†Ô∏è Porta inv√°lida no ambiente: ${envPort}. Usando porta padr√£o: ${DEFAULT_PORT}`,
      );
      return DEFAULT_PORT;
    }
    return port;
  }
  return DEFAULT_PORT;
}

/**
 * Exibe banner de inicializa√ß√£o
 */
function showStartupBanner(): void {
  console.log('');
  console.log('üöÄ ========================================');
  console.log(`üî• ${APP_NAME}`);
  console.log('üçï Boa Pizza - Sistema de Automa√ß√£o');
  console.log('üöÄ ========================================');
  console.log('');
}

// ===========================
// FUN√á√ÉO PRINCIPAL
// ===========================

/**
 * Fun√ß√£o principal da aplica√ß√£o
 */
async function main(): Promise<void> {
  try {
    // Configurar tratamento global de erros
    setupGlobalErrorHandlers();

    // Exibir banner
    showStartupBanner();

    // Obter porta
    const port = getPort();
    console.log(`üì° Configurando servidor na porta: ${port}`);

    // Inicializar API
    const api = new WhatsAppAPI();
    await api.start(port);

    console.log('‚úÖ Aplica√ß√£o iniciada com sucesso!');
    console.log(`üåê API dispon√≠vel em: http://localhost:${port}`);
    console.log('üì± Aguarde o QR Code para conectar o WhatsApp...');
  } catch (error) {
    console.error('üí• Erro fatal ao inicializar aplica√ß√£o:');
    console.error('üìã Detalhes:', error);

    if (error instanceof Error) {
      console.error('üìä Stack trace:', error.stack);
    }

    console.error('üîÑ Tente reiniciar a aplica√ß√£o.');
    process.exit(1);
  }
}

// ===========================
// EXECU√á√ÉO
// ===========================

// Executar aplica√ß√£o
main().catch((error) => {
  console.error('üíÄ Erro cr√≠tico na execu√ß√£o:', error);
  process.exit(1);
});
